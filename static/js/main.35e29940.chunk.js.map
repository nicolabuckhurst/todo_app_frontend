{"version":3,"sources":["components/header.js","components/footer.js","components/form.js","components/counter.js","components/tablerow.js","components/table.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","React","Component","Footer","style","styles","href","my-footer","background-color","color","Form","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","value","handleChange","bind","assertThisInitialized","handleSubmit","event","setState","target","preventDefault","addTaskHandler","onSubmit","class","type","placeholder","onChange","Counter","count","counter-button","TableRow","rowClass","handleCompletionToggleClick","handleDeleteClick","_this2","setTimeout","toggleCompleteStatus","task","id","_this3","deleteTask","textStyle","completed","completedTextStyle","text","mybuttoncolumn","onClick","width","textDecoration","Table","tableRowsToRender","i","tasks","length","unshift","tablerow","key","push","createRows","App","counter","addTask","taskText","taskList","splice","header","components_form","filter","element","table","footer","transparent-box","height","content","overflow-y","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.35e29940.chunk.js","sourcesContent":["import React from 'react';\n\nclass Header extends React.Component{\n\n    render(){\n        return(\n            //row for heading\n            <div className=\"row mb-3 mt-3\">\n                <div className=\"col-12\">\n                    <p className=\"display-4 text-center\">To Do List</p>\n                </div>\n            </div>\n        )    \n    }\n}\n\nexport default Header;","import React from 'react'\n\nclass Footer extends React.Component{\n    render(){\n        return(\n         //footer that should stick to bottom of screen no matter what the size of the content above\n            <footer style={styles[\"my-footer\"]}>\n                {/*container fluid makes it full width of page*/}\n                <div className=\"container-fluid\">\n                    <div className=\"row\">\n                        <div className=\"col-12 text-right mt-2 mb-2\">\n                            <a className=\"text-light\" href=\"#\">Footer</a>\n                        </div>\n                    </div>\n                </div>\n            </footer>\n        )\n    }\n}\n\nconst styles = {\n    \"my-footer\":{\n        \"background-color\": \"gray\",\n        \"color\":\"white\"\n    }\n  }\n\nexport default Footer","import React from 'react'\n\nclass Form extends React.Component{\n\n    constructor(props){\n        super(props)\n        this.state={value:\"\"}\n\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n\n    }\n\n    handleChange(event){\n        this.setState({value:event.target.value})\n    }\n\n    handleSubmit(event){\n        event.preventDefault()\n        this.props.addTaskHandler(this.state.value)\n        this.setState({value:\"\"})\n    }\n\n    render(){\n        return(\n            <form onSubmit={this.handleSubmit}>\n                <div class=\"form-row justify-content-center align-items-center mb-2 pb-4\">\n                    <div class=\"col-12 col-lg-8\">\n                        <div class=\"input-group mb-3\">\n                            <input type=\"text\" class=\"form-control\" placeholder=\"enter new task here\" value={this.state.value} onChange={this.handleChange} />\n                            <div class=\"input-group-append\">\n                                <button class=\"btn btn-secondary\" type=\"submit\">submit</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </form>\n        )\n    }\n}\n\nexport default Form","import React from 'react'\n\n//pass a prop called count to this component containing the total number of tasks remaining\nclass Counter extends React.Component{\n   render(){\n       return(\n            <div className=\"row mb-4 justify-content-center\">\n                <div className=\"col-10 text-center\">\n                    <button type=\"button\" className=\"btn btn-lg\" style={styles[\"counter-button\"]}>\n                        Tasks Remaining: <span className=\"badge badge-light ml-2\">{this.props.count}</span>\n                        <span className=\"sr-only\">tasks to do</span>\n                    </button>\n                </div>\n            </div> \n       )\n   }\n}\n\nconst styles={\n    \"counter-button\": {\n        \"background-color\": \"midnightblue\",\n        \"color\": \"white\"\n    }\n}\n\nexport default Counter","import React from 'react'\n\n//pass this component a prop called key as a list of these will be created and react needs a key prop to \n//tell when components change\n//pass this component a prop called text which is task text you wish to appear in row\nclass TableRow extends React.Component{\n    constructor(props){\n        super(props)\n\n        //set className as a state so you can change the classname of <tr> and trigger an animation...see app.css for class definitions\n        this.state={rowClass:\"myRow\"}\n\n        this.handleCompletionToggleClick = this.handleCompletionToggleClick.bind(this)\n        this.handleDeleteClick = this.handleDeleteClick.bind(this);\n    }\n\n    handleCompletionToggleClick(event){\n        event.preventDefault()\n        //change the className using setState so render is called with new className and css transition is triggered\n        this.setState({rowClass:\"myRow myRowAfterButtonClick\"})\n        //the animations to shrink row takes 0.5s to complete so use setTimeout to delay next steps from being \n        //executed until animation is complete\n        //once animation is complete change task status to complete ..this changes state in app conponent and page is\n        //rerendered ... remember to set classNames back at end otherwise this row won't appear as completed at bottom \n        //of table as it will be shrunk and invisible \n        //had some difficulty calling this inside setTimeout due to this having context of winow not this object...solved by\n        //using arrow functions which don't have their own this but inherit from the enclosing lexical context.\n        //added an extra 10ms delay between toggling status of completion and making row reappear in animation....without this\n        //safari does not render the css transition properly...I DON'T REALLY KNOW WHY!\n        setTimeout(()=>{this.props.toggleCompleteStatus(this.props.task.id); \n                        setTimeout(()=>{this.setState({rowClass:\"myRow\"})}, 10);}, 500) \n    }\n\n\n    handleDeleteClick(event){\n        event.preventDefault()\n        //change the className using setState so render is called with new className and css transition is triggered\n        this.setState({rowClass:\"myRow myRowAfterButtonClick\"})\n        //the animations to shrink row takes 0.5s to complete so use setTimeout to delay next steps from being \n        //executed until animation is complete\n        //once animation is complete change task status to complete ..this changes state in app conponent and page is\n        //rerendered ... remember to set classNames back at end otherwise this row won't appear as completed at bottom \n        //of table as it will be shrunk and invisible \n        //had some difficulty calling this inside setTimeout due to this having context of winow not this object...solved by\n        //using arrow functions which don't have their own this but inherit from the enclosing lexical context.\n        setTimeout(()=>{this.props.deleteTask(this.props.task.id); \n            this.setState({rowClass:\"myRow\"})}, 500)\n    }\n\n    render(){\n        let textStyle = {}\n        if(this.props.task.completed == true){\n            textStyle = styles.completedTextStyle\n        }\n\n        return(\n            <tr className={this.state.rowClass}>\n                <td className=\"align-middle\" style={textStyle}>{this.props.task.text}</td>\n                <td style={styles.mybuttoncolumn} className=\"text-right\">\n                    {this.props.task.completed ? (\n                        <button type=\"button\" className=\"btn btn-secondary btn-sm\" onClick={this.handleCompletionToggleClick}>Reinstate Task</button>\n                    ) : (\n                        <button type=\"button\" className=\"btn btn-secondary btn-sm\" onClick={this.handleCompletionToggleClick}>Done</button>\n                    )\n                    }\n                </td>\n                <td style={styles.mybuttoncolumn} className=\"text-right\">\n                    <button type=\"button\" className=\"btn btn-secondary btn-sm\" onClick={this.handleDeleteClick}>Delete</button>\n                </td>\n            </tr> \n        )\n    }\n\n}\n\nconst styles={\n    mybuttoncolumn:{\n        width:\"8%\"\n    },\n    completedTextStyle:{\n        color:\"darkgray\",\n        textDecoration: \"line-through\"\n    }\n}\n\n\nexport default TableRow","import React from 'react'\nimport TableRow from './tablerow'\n\n//pass a prop which is an array of task object to table and it will create a table with the appropriate row components\n//a task object will look like this {id:\"number\", text:\"string\", completed:\"boolean\"}\nclass Table extends React.Component{\n    \n    createRows(){\n        let tableRowsToRender =[];\n        for(let i=0; i<this.props.tasks.length;i++){\n            //if task isn't complete add to beginning of array using unshift ...this means non completed tasks will appear most rrcently added first\n            if(this.props.tasks[i].completed == false){\n                tableRowsToRender.unshift(\n                    <TableRow key={this.props.tasks[i].id} task={this.props.tasks[i]} toggleCompleteStatus={this.props.toggleCompleteStatus} deleteTask={this.props.deleteTask}  /> //react needs this key to identify when an aray element changes\n                )\n            } else {\n            //if task is complete add to the end of the array..completed tasks will appear in order they were added most recent last\n                tableRowsToRender.push(\n                    <TableRow key={this.props.tasks[i].id} task={this.props.tasks[i]} toggleCompleteStatus={this.props.toggleCompleteStatus} deleteTask={this.props.deleteTask}  /> //react needs this key to identify when an aray element changes\n                )\n            }\n        }\n        return tableRowsToRender\n    }\n\n    render(){\n        return(\n            <div class=\"row\">\n                <div className=\"col-12\">\n                    <div className=\"row justify-content-center\">\n                        <div className=\"col-12 col-lg-8\">\n                            <p className=\"h3\">Task List</p>\n                        </div>\n                    </div>\n                     <div className=\"row justify-content-center\">\n                         <div className=\"col-12 col-lg-8\">\n                            <div className=\"table-responsive\">\n                                <table className=\"table table-striped\">\n                                    <tbody>\n                                        {this.createRows()}\n                                    </tbody>\n                                </table>\n                            </div>\n                        </div>  \n                    </div>         \n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Table","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/header';\nimport Footer from './components/footer';\nimport Form from './components/form';\nimport Counter from './components/counter';\nimport Table from './components/table';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n\n    //create a counter for unique id's when new task is created..this is not a state as it doesn't need to be monitored for\n    //change by react...we will not reuse id's when a task is deleted\n    this.counter = 0;\n\n    super(props);\n\n    //create an empty array to hold tasks as state\n    this.state = {tasks:[]}\n\n    //bind add task function to this object\n    this.addTask = this.addTask.bind(this)\n    this.toggleCompleteStatus = this.toggleCompleteStatus.bind(this)\n    this.deleteTask = this.deleteTask.bind(this)\n\n  }\n\n  //function for adding a new task and updating state\n  addTask(taskText){\n    //create a new uncompleted task based on taskText\n    const task={\n      id:this.counter,\n      text:taskText,\n      completed: false\n    }\n    //get current list of tasks stored in state and push new task onto end\n    let taskList = this.state.tasks;\n    taskList.push(task);\n    //use setState to update the taskList stored in state\n    this.setState({tasks:taskList})\n    this.counter ++;\n  }\n\n  //function for changing task status to completed\n  toggleCompleteStatus(id){\n    //find task by id and toggle the completed property\n    let taskList = this.state.tasks;\n    for(let i=0; i<taskList.length; i++){\n      if(taskList[i].id == id){\n        taskList[i].completed = !taskList[i].completed //toggle the boolean value\n      }\n    }\n    //use setState to update taskList stored in State\n    this.setState({tasks:taskList})\n  }\n\n  //function to delete task\n  deleteTask(id){\n    //find task by id and delete from array\n    let taskList = this.state.tasks;\n    for(let i=0; i<taskList.length; i++){\n      if(taskList[i].id == id){\n        taskList.splice(i,1);\n      }\n    }\n    //use setState to update taskList stored in State\n    this.setState({tasks:taskList})\n  }\n  \n  render() {\n    return (\n      <div style = {styles[\"transparent-box\"]} className=\"d-flex flex-column\">\n\n\n        {/*wrap all the content except the footer in a div called \"content\"\n        this makes the footer stick to the bottom\n        of the viewport even when very little content on page\n        there are no Bootstrap classes to do this automatically\n\n        make the transparentBox that holds the content and the footer\n        display flex (d-flex in bootstrap makes a container display flex and\n        turns direct children into flex items)\n        make the flex direction column so the \"content\" and \"footer\" are added one below the\n        other just like block items so won't mess up any formatting\n\n        make \"content\" flex-grow-1 so it grows in size to fill all the available vertical\n        space in transparentBox (which is already set to height 100vh in css file)\n        just leaving space for the footer*/}\n            \n        <div style={styles[\"content\"]} className=\"pt-5 flex-grow-1\"> {/*need padding as set navbar as fixed-top, makes it sit over the top of other content*/}\n          \n          <div className=\"container-fluid\">\n            <Header/>\n            <Form addTaskHandler={this.addTask}/>\n            <Counter count={this.state.tasks.filter(function(element){return(element.completed==false)}).length} />\n            <Table tasks={this.state.tasks} toggleCompleteStatus={this.toggleCompleteStatus} deleteTask={this.deleteTask}/>\n          </div> {/*end of container-fluid...bootstrap container for laying out components within main content of page*/}\n\n        </div> {/*end of content div that resizes to whole of screen minus footer*/}\n\n        <Footer/>\n      </div> /*end of transparent box*/\n    );\n  }\n}\n\nconst styles = {\n  \"transparent-box\":{\n    \"height\":\"100vh\"\n  },\n  \"content\":{\n    \"background-color\": \"rgba(255,255,255,0.73)\",\n    \"overflow-y\": \"auto\"\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}